# -*- coding: utf-8 -*-
"""LinkedList.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14yB7i6U3cjdVipXjfXBLq0fV5VcskRR_

# Create a LinkedList with method
"""

class LinkedList:
    def __init__(self):
        self.head = None

    def __repr__(self):
        node = self.head
        nodes = []
        while node is not None:
          nodes.append(node.data)
          node = node.next
        nodes.append("None")
        return " -> ".join(nodes)

    def __iter__(self):
        node = self.head
        while node is not None:
          yield node
          node = node.next

    def add_first(self, node):
        node.next = self.head
        self.head = node

    def add_last(self, node):
        if self.head is None:
            self.head = node
            return
        for current_node in self:
            pass
        current_node.next = node

    def add_after(self, target_node_data, new_node):
        if self.head is None:
          raise Exception("List is empty")
        for node in self:
          if node.data == target_node_data:
            new_node.next = node.next
            node.next = new_node
            return
        raise Exception("Target not found")

    def add_before(self, target_node_data, new_node):
        if self.head is None:
            raise Exception("List is empty")
        if self.head.data == target_node_data:
            return self.add_first(new_node)
        prev_node = self.head
        for node in self:
            if node.data == target_node_data:
                prev_node.next = new_node
                new_node.next = node
                return
            prev_node = node
        raise Exception("Target Node not found")

    def remove_node(self, target_node_data):
         if self.head is None:
          raise Exception("List is empty")

         if self.head.data == target_node_data:
            self.head = self.head.next
            return

         previous_node = self.head
         for node in self:
           if node.data == target_node_data:
            previous_node.next = node.next
            node.next = None
            return
           previous_node = node
        
         raise Exception("Target Node not found")


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

    def __repr__(self):
        return self.data

llist = LinkedList()
first_node = Node("a")
llist.head = first_node
second_node = Node("b")
third_node = Node("c")
first_node.next = second_node
second_node.next = third_node

for node in llist:
  print(node)

"""# Create an object and call method

"""

# การใช้ Add First 
llist.add_first(Node("b2"))
llist

# การใช้ Add Last
llist.add_last(Node("b"))
llist

# การใช้ Add Before
llist.add_before("c", Node("x"))
llist

# การใช้ Add After
llist.add_after("a", Node("b"))
llist

llist.remove_node("a")
llist

"""# Identical LinkedList """

class Node:
    def __init__(self, d):
        self.data = d
        self.next = None
 
class LinkedList:
    def __init__(self):
        self.head = None # head of list
     
    # Returns true if linked lists a and b
    # are identical, otherwise false
    def areIdentical(self, listb):
        a = self.head
        b = listb.head
        while (a != None and b != None):
            if (a.data != b.data):
                return False
 
            # If we reach here, then a and b
            # are not null and their data is
            # same, so move to next nodes
            # in both lists
            a = a.next
            b = b.next
 
        # If linked lists are identical,
        # then 'a' and 'b' must be null
        # at this point.
        return (a == None and b == None)
 
    # UTILITY FUNCTIONS TO TEST fun1() and fun2()
    # Given a reference (pointer to pointer) to the
    # head of a list and an int, push a new node on
    # the front of the list.
 
    def push(self, new_data):
         
        # 1 & 2: Allocate the Node &
        # Put in the data
        new_node = Node(new_data)
 
        # 3. Make next of new Node as head
        new_node.next = self.head
 
        # 4. Move the head to point to new Node
        self.head = new_node
 
# Driver Code
llist1 = LinkedList()
llist2 = LinkedList()
 
# The constructed linked lists are :
# llist1: 3->2->1
# llist2: 3->2->1
llist1.push(1)
llist1.push(2)
llist1.push(3)
llist2.push(1)
llist2.push(2)
llist2.push(3)
 
if (llist1.areIdentical(llist2) == True):
    print("Identical ")
else:
    print("Not identical ")
    
    class Node:
     def __init__(self, d):
        self.data = d
        self.next = None
 
    class LinkedList:
     def __init__(self):
        self.head = None # head of list
     
    # Returns true if linked lists a and b
    # are identical, otherwise false
     def areIdentical(self, listb):
        a = self.head
        b = listb.head
        while (a != None and b != None):
            if (a.data != b.data):
                return False
 
            # If we reach here, then a and b
            # are not null and their data is
            # same, so move to next nodes
            # in both lists
            a = a.next
            b = b.next
 
        # If linked lists are identical,
        # then 'a' and 'b' must be null
        # at this point.
        return (a == None and b == None)
 
    # UTILITY FUNCTIONS TO TEST fun1() and fun2()
    # Given a reference (pointer to pointer) to the
    # head of a list and an int, push a new node on
    # the front of the list.
 
     def push(self, new_data):
         
        # 1 & 2: Allocate the Node &
        # Put in the data
        new_node = Node(new_data)
 
        # 3. Make next of new Node as head
        new_node.next = self.head
 
        # 4. Move the head to point to new Node
        self.head = new_node
 
# Driver Code
llist1 = LinkedList()
llist2 = LinkedList()
 
# The constructed linked lists are :
# llist1: 3->2->1
# llist2: 3->2->1
llist1.push(1)
llist1.push(2)
llist1.push(3)
llist2.push(1)
llist2.push(2)
llist2.push(3)
 
if (llist1.areIdentical(llist2) == True):
    print("Identical ")
else:
    print("Not identical ")