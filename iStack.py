# -*- coding: utf-8 -*-
"""Stack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gYOxYsLJd9H0JBdj6xTYLFO8CUgVl8OP

เขียนโปรแกรมตรวจสอบความถูกต้องของการใส่วงเล็บโดยใช้ Stack
"""

open_bracket = ["[","{","("]
close_bracket = ["]","}",")"]

def check(myStr):
    stack = []
    for i in myStr:
        if i in open_bracket:  #ถ้าเราเจอ เจ้าวงเล็บเปิดให้นำมาใส่ใน stack [] ที่เราสร้างขึ้นใหม่
            stack.append(i)
        elif i in close_bracket:  #เก็บวงเล็บปิดไว้ใน position
            position = close_bracket.index(i)
            if ((len(stack) > 0) and
                (open_bracket[position] == stack[len(stack)-1])): #ถ้าเราเจอ เจ้าวงเล็บปิด ตัวใด ที่นำมา match เข้ากับวงเล็บเปิดใน stack ตัวบนสุด ได้ ให้ลบออก
                stack.pop()
        else:
                return "Unbalanced"
    if len(stack) == 0:  #ถ้าโดนลบออกหมดแปลว่า มีจำนวนวงเล็บเปิดและปิดเท่ากัน
        return "Balanced"
    else:
        return "Unbalanced" #ถ้าไม่โดนลบออกจนหมดแปลว่ามีจำนวนวงเล็บที่ไม่ลงตัว จับคู่กันได้ไม่ครบ  

# Pass value via parameter
string = "{[]{()}}"
print(string," : ", check(string))
  
string = "[{}{}]"
print(string," : ", check(string))
  
string = "((()"
print(string," : ",check(string))

"""One approach to check balanced parentheses is to use stack. Each time, when an open parentheses is encountered push it in the stack, and when closed parenthesis is encountered, match it with the top of stack and pop it. If stack is empty at the end, return Balanced otherwise, Unbalanced.

เขียนโปรแกรมแปลงเลขฐาน 10 เป็นฐาน 2 โดยใช้ Stack
"""

def convert_to_binary(given_number):
    remainder_stack = []

    while given_number > 0:
        remainder = given_number % 2 # หารสองและได้เศษจากการหารสอง
        remainder_stack.append(remainder) #เก็บเศษไว้ใน remainder_stack
        given_number = given_number // 2   # พอ หารสองแล้วเก็บเศษไว้จะเหลือผลหารไว้หารต่อ

    binary_digits = []
    while remainder_stack:
        # รายการช่วยแสดงให้เห็นว่าพฤติกรรมเดียวที่เราต้องการจาก
        # `remainder_stack` เป็นเหมือนสแต็ก
        # เราสามารถย้อนกลับและเข้าร่วม `remainder_stack ได้
        binary_digits.append(str(remainder_stack.pop()))

    return ''.join(binary_digits)

convert_to_binary(92)  # => '1011100'

print(899//2)