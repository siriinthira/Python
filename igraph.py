# -*- coding: utf-8 -*-
"""iGraph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1idv-oaGzlgaFKMoL3Dv4-ltRBw9XT1PM

# Create a Graph
"""

global graph
def add_vertex(v):
 if v in graph:
   print("Vertex ", v, " already exists.")
 else:
   graph[v] = []

def add_edge(v1, v2, e):
  if v1 not in graph:
   print("Vertex ", v1, " does not exist.")
  elif v2 not in graph:
   print("Vertex ", v2, " does not exist.")
  else:
   temp = [v2, e]
   graph[v1].append(temp)
def print_graph():
  for vertex in graph:
    for edges in graph[vertex]:
      print(vertex, " -> ", edges[0], " edge weight: ", edges[1])


graph = {} 
add_vertex(1)
add_vertex(2)
add_vertex(3)
add_vertex(4)  

add_edge(1, 2, 1)
add_edge(1, 3, 1)
add_edge(2, 3, 3)
add_edge(3, 4, 4)
add_edge(4, 1, 5)
print_graph()

print ("Internal representation: ", graph)

"""# Adjacency Matrix"""

def add_vertex(v):
    global graph
    global vertices_no
    global vertices
    if v in vertices:
       print("Vertex ", v, " already exists")
    else:
        vertices_no = vertices_no + 1
        vertices.append(v)
        if vertices_no > 1:
            for vertex in graph:
                vertex.append(0)
        temp = []
        for i in range(vertices_no):
            temp.append(0)
        graph.append(temp)

def add_edge(v1, v2, e):
    global graph
    global vertices
    if v1 not in vertices:
       print("Vertex ", v1, " does not exist.")
    elif v2 not in vertices:
       print("Vertex ", v2, " does not exist.")
    else:
       index1 = vertices.index(v1)
       index2 = vertices.index(v2)
       graph[index1][index2] = e
def print_graph():
      global graph
      global vertices_no
      global vertices
      for i in range(vertices_no):
        for j in range(vertices_no):
         if graph[i][j] != 0:
          print(vertices[i], " -> ", vertices[j], " edge weight: ", graph[i][j])
vertices = []
vertices_no = 0
graph = []
# Add vertices to the graph
add_vertex(1)
add_vertex(2)
add_vertex(3)
add_vertex(4)
add_edge(1, 2, 1)
add_edge(1, 3, 1)
add_edge(2, 3, 3)
add_edge(3, 4, 4)
add_edge(4, 1, 5)
print_graph()
print("Internal representation: ", graph)

"""# Assignment 7

"""

global graph
#decalre
res_v1 = ""
res_v2 = ""
res_weight = ""


def add_vertex(v):
    if v in graph:
        print("Vertex ", v, " already exists.")
    else:
        graph[v] = []


def add_edge(v1, v2, weight):
    if v1 not in graph:
        print("Vertex ", v1, " does not exist.")
    elif v2 not in graph:
        print("Vertex ", v2, " does not exist.")
    else:
#         temp = [v2, weight]
#         graph[v1].append(temp)
        print("สถานีต้นทาง:", v1, "=> สถานีปลายทาง:", v2 ,"=> ค่าโดยสาร:",weight)
        #initialize res to store received value
        global res_v1
        global res_v2
        global res_weight
        if res_weight == "":
            res_weight = weight
            res_v1 = v1
            res_v2 = v2
        else:
            if  weight< res_weight:
                res_weight = weight
                res_v1 = v1
                res_v2 = v2
        #print(res_v1 ,"->",res_v2," edge weight: ",res_weight)
        #compare if new value added is less than current values which are received
        #then we will print that value becuase it is the minimum value after comparison

def print_graph():
    for vertex in graph:
        for edges in graph[vertex]:
            print((vertex, " -> ", edges[0], " edge weight: ", edges[1]))



graph = {}
# stores the number of vertices in the graph
add_vertex('Chatuchak')
add_vertex('Lumpini')
add_vertex('Huai Khwang')
add_vertex('Phasi Chareon')
add_vertex('Samyan')
# Add the edges between the vertices by specifying
# the from and to vertex along with the edge weights.
add_edge('Chatuchak', 'Samyan', 42)
add_edge('Lumpini', 'Samyan', 19)
add_edge('Huai Khwang', 'Samyan', 35)
add_edge('Phasi Chareon', 'Samyan', 38)
# print_graph()
print("เส้นทางประหยัดที่สุด :", res_v1 ,"->",res_v2," ค่าโดยสาร: ",res_weight)

# Reminder: the second element of each list inside the dictionary
# denotes the edge weight.
# print("Internal representation: ", graph)


