# -*- coding: utf-8 -*-
"""iQueue.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HBitboLGunsaN4lY2BqOuPwFs_hX5ekG

Create Class
"""

class Queue:
  def __init__(self, elements = None):
    if(elements == None):
      self.elements = list()
    else:
      self.elements = elements
  def enqueue(self, item):
      self.elements.append(item)
  def dequeue(self):
      if(len(self.elements) > 0):
        return self.elements.pop(0)
  def get_size(self):
        return len(self.elements)
  def is_empty(self):
        return len(self.elements) == 0
  def __str__(self):
        return str(self.elements)

"""Create object"""

myQueue = Queue();
print(myQueue);
myQueue.enqueue("Hello");
print(myQueue);
myQueue.enqueue("World");
print(myQueue);
myQueue.dequeue();
print(myQueue);

"""Recursive Programming Factorial"""

def factorial(n):
  # Base case: 1! = 1 or 0! = 1
  if (n == 1) or (n == 0):
    return 1
    # Recursive case: n! = n * (n-1)!
  else:
    return n * factorial(n-1)

factorial(10)

"""Recursive for Summation"""

def reCurSum(n):
 
 if (n == 1):
   return 1
 elif (n == 0):
   return 0
 else:
   return n + reCurSum(n-1)

reCurSum(5)

"""Binary Search

"""

def binary_search(arr, low, high, x):
  if high >= low:
    mid = (high + low) // 2
    if arr[mid] == x:
       return mid
    elif arr[mid] > x:
       return binary_search(arr, low, mid - 1, x)
    else:
       return binary_search(arr, mid + 1, high, x)
  else:
     return -1

arr = [ 2, 3, 4, 10, 40 ]
x = 10

    # Function call
result = binary_search(arr, 0, len(arr)-1, x)
if result != -1:
    print("Element is present at index", str(result))
else:
    print("Element is not present in array")

# Python program to
# demonstrate queue implementation
# using list
 
# Initializing a queue
queue = []
 
# Adding elements to the queue
queue.append('Algorithm')
queue.append('Database')
queue.append('Software Engineering')
 
print("Initial queue")
print(queue)
 
# Removing elements from the queue
# print("\nElements dequeued from queue")
# print(queue.pop(0))
# print(queue.pop(0))
# print(queue.pop(0))
 
print("\nQueue all elements")
print(queue)
 
# Uncommenting print(queue.pop(0))
# will raise and IndexError
# as the queue is now empty